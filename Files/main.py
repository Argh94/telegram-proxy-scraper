import requests
from bs4 import BeautifulSoup
import re
import random
import time
import logging
from datetime import datetime
import pytz
import jdatetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import WebDriverException
import unicodedata
import socket
from concurrent.futures import ThreadPoolExecutor, as_completed

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'
]

def get_random_user_agent():
    return random.choice(USER_AGENTS)

def clean_line(line):
    line = line.strip().replace('\r', '').replace('\n', '')
    line = ''.join(c for c in line if unicodedata.category(c)[0] != 'C')
    return line

def check_proxy_status(server, port, timeout=3):  
    """Check if a proxy server is online by attempting a connection."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((server, int(port)))
        sock.close()
        if result == 0:
            logging.info(f"Proxy {server}:{port} is online")
            return True
        else:
            logging.warning(f"Proxy {server}:{port} is offline or unreachable")
            return False
    except (socket.timeout, socket.gaierror, ConnectionRefusedError) as e:
        logging.error(f"Error checking proxy {server}:{port}: {e}")
        return False

def fetch_proxies_from_text_urls(urls):
    all_links = []
    headers = {'User-Agent': get_random_user_agent()}
    pattern = r'^(tg://proxy|https://t\.me/proxy)\?server=[^&]+&port=\d+(&secret=.+)$'
    
    for url in urls:
        try:
            logging.info(f"Fetching proxies from {url}")
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            lines = response.text.splitlines()
            proxy_checks = []
            
            for line in lines:
                line = clean_line(line)
                if not line:
                    continue
                if re.match(pattern, line):
                    match = re.match(r'^(?:tg://proxy|https://t\.me/proxy)\?server=([^&]+)&port=(\d+)&secret=.+$', line)
                    if match:
                        server, port = match.groups()
                        proxy_checks.append((line, server, port))
                    else:
                        logging.debug(f"Invalid or skipped proxy: {line} (does not match pattern)")
                else:
                    logging.debug(f"Invalid or skipped proxy: {line} (does not match pattern)")
            
            with ThreadPoolExecutor(max_workers=30) as executor:  
                future_to_proxy = {executor.submit(check_proxy_status, server, port): line for line, server, port in proxy_checks}
                for future in as_completed(future_to_proxy):
                    line = future_to_proxy[future]
                    try:
                        if future.result():
                            all_links.append(line)
                            logging.info(f"Valid and online proxy found: {line}")
                        else:
                            logging.warning(f"Skipping offline proxy: {line}")
                    except Exception as e:
                        logging.error(f"Error checking proxy {line}: {e}")
            
            logging.info(f"Fetched {len(lines)} lines, {len(all_links)} valid and online MTProto proxies from {url}")
        except requests.RequestException as e:
            logging.error(f"HTTP error fetching {url}: {e}")
        time.sleep(random.uniform(0.5, 1.0))  
    return all_links

def fetch_proxies_from_telegram_channel(url):
    proxies = []
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument(f'user-agent={get_random_user_agent()}')
    
    try:
        driver = webdriver.Chrome(options=options)
        driver.get(url)
        logging.info(f"Opened {url}")
        
        last_height = driver.execute_script("return document.body.scrollHeight")
        for i in range(5):  
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  
            new_height = driver.execute_script("return document.body.scrollHeight")
            logging.info(f"Scrolled {url}, attempt {i+1}, new height: {new_height}")
            if new_height == last_height:
                logging.info(f"No more content to load for {url}")
                break
            last_height = new_height
        
        page_source = driver.page_source
        if "CAPTCHA" in page_source or "recaptcha" in page_source.lower():
            logging.warning(f"CAPTCHA detected on {url}")
        
        soup = BeautifulSoup(page_source, 'html.parser')
        pattern = r'^(tg://proxy|https://t\.me/proxy)\?server=[^&]+&port=\d+(&secret=.+)$'
        proxy_elements = soup.find_all('a', href=re.compile(pattern))
        
        proxy_checks = []
        for element in proxy_elements:
            proxy = element.get('href')
            match = re.match(r'^(?:tg://proxy|https://t\.me/proxy)\?server=([^&]+)&port=(\d+)&secret=.+$', proxy)
            if match:
                server, port = match.groups()
                proxy_checks.append((proxy, server, port))
        
        with ThreadPoolExecutor(max_workers=30) as executor:  
            future_to_proxy = {executor.submit(check_proxy_status, server, port): proxy for proxy, server, port in proxy_checks}
            for future in as_completed(future_to_proxy):
                proxy = future_to_proxy[future]
                try:
                    if future.result():
                        proxies.append(proxy)
                        logging.info(f"Valid and online proxy found from Telegram: {proxy}")
                    else:
                        logging.warning(f"Skipping offline proxy from Telegram: {proxy}")
                except Exception as e:
                    logging.error(f"Error checking proxy {proxy}: {e}")
        
        logging.info(f"Fetched {len(proxies)} valid and online MTProto proxies from {url}")
    except WebDriverException as e:
        logging.error(f"WebDriver error fetching {url}: {e}")
    except Exception as e:
        logging.error(f"General error fetching {url}: {e}")
    finally:
        try:
            driver.quit()
        except:
            pass
    time.sleep(random.uniform(0.5, 1.0))  
    return proxies

def save_proxies_to_file(proxy_list, filename='../proxy.txt'):
    try:
        unique_proxies = list(set(proxy_list))
        with open(filename, 'w', encoding='utf-8') as file:
            for proxy in unique_proxies:
                file.write(proxy + '\n')
        logging.info(f"Saved {len(unique_proxies)} unique proxies to {filename}")
        return unique_proxies
    except IOError as e:
        logging.error(f"Error writing to {filename}: {e}")
        return []

def update_readme(proxy_list):
    try:
        utc_now = datetime.now(pytz.UTC)
        iran_tz = pytz.timezone('Asia/Tehran')
        iran_now = utc_now.astimezone(iran_tz)
        
        jalali_date = jdatetime.datetime.fromgregorian(datetime=iran_now)
        update_time_iran = jalali_date.strftime('%H:%M %d-%m-%Y')
        logging.info(f"Updating README with Iranian timestamp: {update_time_iran}")

        sample_proxies = random.sample(proxy_list, min(20, len(proxy_list))) if proxy_list else []
        table_rows = ""
        valid_proxies = 0
        for i, proxy in enumerate(sample_proxies, 1):
            proxy = proxy.strip()
            proxy = proxy.replace('tg://proxy', 'https://t.me/proxy')
            
            match = re.match(r'^https://t\.me/proxy\?server=([^&]+)&port=(\d+)&secret=([0-9a-fA-F]+)(?:[0-9a-fA-F]*\..*)?$', proxy)
            if match:
                server, port, secret = match.groups()
                display_proxy = f"https://t.me/proxy?server={server}&port={port}&secret={secret}"
                table_rows += f"| {i} | `{server}` | `{port}` | ‚úÖ ŸÅÿπÿßŸÑ | [ŸÑ€åŸÜ⁄© Ÿæÿ±Ÿà⁄©ÿ≥€å]({display_proxy}) |\n"
                valid_proxies += 1
                logging.info(f"Valid proxy added to table: {proxy} (displayed as link to {display_proxy})")
            else:
                logging.warning(f"Invalid proxy format, skipped: {proxy}")
        
        logging.info(f"Added {valid_proxies} valid proxies to the table (out of {len(sample_proxies)} sampled)")  # ÿ±ŸÅÿπ ÿÆÿ∑ÿß€å ÿ≥€åŸÜÿ™ÿßŸÉÿ≥€å

        readme_content = f"""# üìä ŸÜÿ™ÿß€åÿ¨ ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨: (ÿ¢ÿÆÿ±€åŸÜ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å: {update_time_iran})

<p align="center">
  <img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="MIT License" />
  <img src="https://img.shields.io/badge/python-3.9-blue" alt="Python 3.9" />
  <img src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" alt="Contributions Welcome" />
  <img src="https://img.shields.io/badge/Proxy%20Scraper-Running-green" alt="Proxy Scraper" />
  <img src="https://github.com/Argh94/telegram-proxy-scraper/actions/workflows/main.yml/badge.svg" alt="Proxy Scraper Workflow" />
  <img src="https://img.shields.io/github/last-commit/Argh94/telegram-proxy-scraper" alt="GitHub Last Commit" />
  <img src="https://img.shields.io/github/issues/Argh94/telegram-proxy-scraper" alt="GitHub Issues" />
</p>

ÿß€åŸÜ Ÿæÿ±Ÿà⁄òŸá €å⁄© ÿßÿ≥⁄©ÿ±€åŸæÿ™ Ÿæÿß€åÿ™ŸàŸÜ ÿ®ÿ±ÿß€å ÿ¨ŸÖÿπ‚Äåÿ¢Ÿàÿ±€å ÿÆŸàÿØ⁄©ÿßÿ± Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß€å MTProto ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿßÿ≤ ŸÖŸÜÿßÿ®ÿπ ŸÖÿ™ŸÜ€å Ÿà ⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿßÿ≥ÿ™. Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß ÿØÿ± ŸÅÿß€åŸÑ `proxy.txt` ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ Ÿà Ÿáÿ± 3 ÿ≥ÿßÿπÿ™ ÿ®Ÿá‚ÄåÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ.

## ‚ú® ÿØÿ±ÿ®ÿßÿ±Ÿá Ÿæÿ±Ÿà⁄òŸá

ÿß€åŸÜ ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ®ÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ `requests` ÿ®ÿ±ÿß€å ŸÖŸÜÿßÿ®ÿπ ŸÖÿ™ŸÜ€å Ÿà `selenium` ÿ®ÿ±ÿß€å ⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖÿå Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß€å MTProto ÿ±ÿß ÿ¨ŸÖÿπ‚Äåÿ¢Ÿàÿ±€å ŸÖ€å‚Äå⁄©ŸÜÿØ. Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß€å ÿ™⁄©ÿ±ÿßÿ±€å ÿ≠ÿ∞ŸÅ ÿ¥ÿØŸá Ÿà ŸÜÿ™ÿß€åÿ¨ ÿØÿ± ŸÅÿß€åŸÑ `proxy.txt` ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ. ÿß€åŸÜ ŸÅÿ±ÿ¢€åŸÜÿØ ÿ®Ÿá‚ÄåÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ÿ®ÿß **GitHub Actions** Ÿáÿ± 3 ÿ≥ÿßÿπÿ™ ÿßÿ¨ÿ±ÿß ŸÖ€å‚Äåÿ¥ŸàÿØ.

## üöÄ Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß
- üåê ÿ¨ŸÖÿπ‚Äåÿ¢Ÿàÿ±€å Ÿæÿ±Ÿà⁄©ÿ≥€å ÿßÿ≤ ŸÖŸÜÿßÿ®ÿπ ŸÖÿ™ŸÜ€å Ÿà ⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
- üîÑ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ± Ÿáÿ± 3 ÿ≥ÿßÿπÿ™
- üóë ÿ≠ÿ∞ŸÅ Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß€å ÿ™⁄©ÿ±ÿßÿ±€å
- üîë ÿ®ÿØŸàŸÜ ŸÜ€åÿßÿ≤ ÿ®Ÿá API ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
- üì± ŸÖŸÜÿßÿ≥ÿ® ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿØÿ± ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ MTProto

## üìã Ÿæ€åÿ¥‚ÄåŸÜ€åÿßÿ≤Ÿáÿß
- üêç Ÿæÿß€åÿ™ŸàŸÜ 3.9
- üì¶ ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤: `requests`, `beautifulsoup4`, `selenium`, `pytz`, `jdatetime`
- ŸÜÿµÿ® Ÿàÿßÿ®ÿ≥ÿ™⁄Ø€å‚ÄåŸáÿß ÿ®ÿß: `pip install -r requirements.txt`

## üõ† ŸÜÿ≠ŸàŸá ÿßÿ≥ÿ™ŸÅÿßÿØŸá
1. ŸÅÿß€åŸÑ `proxy.txt` ÿ±ÿß ÿßÿ≤ [ÿß€åŸÜÿ¨ÿß](proxy.txt) ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ.
2. ŸÑ€åŸÜ⁄©‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄©ÿ≥€å (ÿ®ÿß ŸÅÿ±ŸÖÿ™ `tg://proxy?...` €åÿß `https://t.me/proxy?...`) ÿ±ÿß ÿØÿ± ⁄©ŸÑÿß€åŸÜÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.
3. ÿØÿ± ÿ¨ÿØŸàŸÑ ÿ≤€åÿ±ÿå ÿ±Ÿà€å ŸÑ€åŸÜ⁄©‚ÄåŸáÿß€å ÿ≥ÿ™ŸàŸÜ **ŸÑ€åŸÜ⁄© Ÿæÿ±Ÿà⁄©ÿ≥€å** ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ ÿ™ÿß ÿ®Ÿá ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ŸáÿØÿß€åÿ™ ÿ¥Ÿà€åÿØ €åÿß ŸÑ€åŸÜ⁄© ÿ±ÿß ⁄©Ÿæ€å ⁄©ŸÜ€åÿØ.
4. ÿ®ÿ±ÿß€å ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿØÿ≥ÿ™€åÿå ÿ®Ÿá ÿ™ÿ® **Actions** ÿØÿ± ŸÖÿÆÿ≤ŸÜ ÿ®ÿ±Ÿà€åÿØ Ÿà ÿ±Ÿà€å **Run workflow** ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ.

## üåç ŸÖŸÜÿßÿ®ÿπ Ÿæÿ±Ÿà⁄©ÿ≥€å
- **ŸÖŸÜÿßÿ®ÿπ ŸÖÿ™ŸÜ€å**:
  - [MahsaNetConfigTopic](https://raw.githubusercontent.com/MahsaNetConfigTopic/proxy/main/proxies.txt)
  - [MhdiTaheri](https://raw.githubusercontent.com/MhdiTaheri/ProxyCollector/main/proxy.txt)
  - [SoliSpirit/mtproto](https://raw.githubusercontent.com/SoliSpirit/mtproto/master/all_proxies.txt)
- **⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ**:
  - iporoto, HiProxy, iproxy, iRoProxy, proxyforopeta, IRN_Proxy, MProxy_ir, ProxyHagh, PyroProxy, ProxyMTProto, MTPro_XYZ, vpns, mtmvpn, asr_proxy, proxyskyy

## üìà ŸÜŸÖŸàŸÜŸá Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß
ÿ¨ÿØŸàŸÑ ÿ≤€åÿ± ŸÜŸÖŸàŸÜŸá‚Äåÿß€å ÿßÿ≤ 20 Ÿæÿ±Ÿà⁄©ÿ≥€å ŸÅÿπÿßŸÑ ÿßÿ≤ ŸÅÿß€åŸÑ `proxy.txt` ÿ±ÿß ŸÜŸÖÿß€åÿ¥ ŸÖ€å‚ÄåÿØŸáÿØ. ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸáÿå ÿ±Ÿà€å ŸÑ€åŸÜ⁄© Ÿæÿ±Ÿà⁄©ÿ≥€å ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ €åÿß ÿ¢ŸÜ ÿ±ÿß ⁄©Ÿæ€å ⁄©ŸÜ€åÿØ:

| # | ÿ≥ÿ±Ÿàÿ± (Server) | ŸæŸàÿ±ÿ™ (Port) | Ÿàÿ∂ÿπ€åÿ™ | ŸÑ€åŸÜ⁄© Ÿæÿ±Ÿà⁄©ÿ≥€å |
|---|---------------|-------------|-------|-------------|
{table_rows}

> **üí° ŸÜ⁄©ÿ™Ÿá**: ÿß€åŸÜ ÿ¨ÿØŸàŸÑ ŸÅŸÇÿ∑ ŸÜŸÖŸàŸÜŸá‚Äåÿß€å ÿßÿ≤ Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿßÿ≥ÿ™. ÿ®ÿ±ÿß€å ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ŸÑ€åÿ≥ÿ™ ⁄©ÿßŸÖŸÑ Ÿà ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿå ŸÅÿß€åŸÑ [proxy.txt](proxy.txt) ÿ±ÿß ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ.

## ü§ù ŸÖÿ¥ÿßÿ±⁄©ÿ™
ÿßÿ≤ ÿß€åÿØŸá‚ÄåŸáÿß Ÿà ŸÖÿ¥ÿßÿ±⁄©ÿ™ ÿ¥ŸÖÿß ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ! ÿ®ÿ±ÿß€å ÿ®Ÿáÿ®ŸàÿØ Ÿæÿ±Ÿà⁄òŸá:
1. €å⁄© **Issue** ÿØÿ± ŸÖÿÆÿ≤ŸÜ ÿ®ÿßÿ≤ ⁄©ŸÜ€åÿØ.
2. €åÿß €å⁄© **Pull Request** ÿ®ÿß ÿ™ÿ∫€å€åÿ±ÿßÿ™ Ÿæ€åÿ¥ŸÜŸáÿßÿØ€å ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ.

## üìú ŸÑÿß€åÿ≥ŸÜÿ≥
ÿß€åŸÜ Ÿæÿ±Ÿà⁄òŸá ÿ™ÿ≠ÿ™ [ŸÑÿß€åÿ≥ŸÜÿ≥ MIT](https://github.com/Argh94/telegram-proxy-scraper/blob/main/Files/LISENSE) ŸÖŸÜÿ™ÿ¥ÿ± ÿ¥ÿØŸá ÿßÿ≥ÿ™.

## üîó ŸÑ€åŸÜ⁄©‚ÄåŸáÿß€å ŸÖŸÅ€åÿØ
- üìÑ [ŸÑ€åÿ≥ÿ™ Ÿæÿ±Ÿà⁄©ÿ≥€å‚ÄåŸáÿß](proxy.txt)
- üöÄ [Ÿàÿ∂ÿπ€åÿ™ GitHub Actions](https://github.com/Argh94/telegram-proxy-scraper/actions)
- ‚≠ê [ŸÖÿß ÿ±ÿß ÿ≥ÿ™ÿßÿ±Ÿá ÿØŸá€åÿØ!](https://github.com/Argh94/telegram-proxy-scraper)

## üìä Stargazers ÿØÿ± ⁄Øÿ∞ÿ± ÿ≤ŸÖÿßŸÜ
<p align="center">
  <img src="https://starchart.cc/Argh94/telegram-proxy-scraper.svg?variant=adaptive" alt="Stargazers over time" />
</p>

---

üåü **ÿ≥Ÿæÿßÿ≥ ÿßÿ≤ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ Telegram Proxy Scraper!** ÿß⁄Øÿ± ÿ≥ÿ§ÿßŸÑ€å ÿØÿßÿ±€åÿØÿå ÿØÿ± ÿ®ÿÆÿ¥ Issues ŸÖÿ∑ÿ±ÿ≠ ⁄©ŸÜ€åÿØ.
"""

        with open('../README.md', 'w', encoding='utf-8') as file:
            file.write(readme_content)
        logging.info("Successfully updated README.md with new styling and Iranian date format")
    except Exception as e:
        logging.error(f"Error updating README.md: {e}")

if __name__ == "__main__":
    text_urls = [
        "https://raw.githubusercontent.com/MahsaNetConfigTopic/proxy/main/proxies.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/ProxyCollector/main/proxy.txt",
        "https://raw.githubusercontent.com/SoliSpirit/mtproto/master/all_proxies.txt"
    ]
    
    telegram_urls = [
        "https://t.me/s/iporoto",
        "https://t.me/s/HiProxy",
        "https://t.me/s/iproxy",
        "https://t.me/s/iRoProxy",
        "https://t.me/s/proxyforopeta",
        "https://t.me/s/IRN_Proxy",
        "https://t.me/s/MProxy_ir",
        "https://t.me/s/ProxyHagh",
        "https://t.me/s/PyroProxy",
        "https://t.me/s/ProxyMTProto",
        "https://t.me/s/MTPro_XYZ",
        "https://t.me/s/vpns",
        "https://t.me/s/mtmvpn",
        "https://t.me/s/asr_proxy",
        "https://t.me/s/proxyskyy"
    ]
    
    text_proxies = fetch_proxies_from_text_urls(text_urls)
    
    telegram_proxies = []
    for url in telegram_urls:
        proxies = fetch_proxies_from_telegram_channel(url)
        telegram_proxies.extend(proxies)
    
    all_proxies = list(set(text_proxies + telegram_proxies))
    
    all_proxies = save_proxies_to_file(all_proxies)
    
    update_readme(all_proxies)
